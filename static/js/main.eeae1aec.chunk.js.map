{"version":3,"sources":["components/Notifications.js","components/Setup.js","components/Board.js","components/OtherBoard.js","logic/Gameboard.js","logic/Player.js","logic/Ship.js","logic/data.js","App.js","index.js"],"names":["Notifications","props","gameOver","setupComplete","setupConfirmed","human","computer","getPClass","info","index","length","useEffect","myBoard","document","querySelector","classList","toggle","setTimeout","lag","id","className","onClick","onConfirmSetup","map","message","messageView","history","player","coords","ship","board","ships","isSunk","hits","upperFirst","onReset","Setup","useState","carrier","battleship","cruiser","submarine","minesweeper","orientation","setOrientation","onMouseDown","e","startXY","clientX","clientY","target","closest","part","shipName","split","partNr","shiftX","getBoundingClientRect","left","clone","cloneNode","style","position","body","append","cloneShip","moveAt","pageX","pageY","top","offsetHeight","onMouseMove","addEventListener","endXY","removeEventListener","range","includes","checkIfMouseClick","rotate","cell","removeChild","elementFromPoint","getCell","shift","i","Number","some","getCoords","horizontal","onPlacement","verticalStyle","gridRow","width","gridTemplateColumns","gridTemplateRows","querySelectorAll","forEach","shipView","content","push","shipViews","Object","values","name","gridColumn","Board","removeShip","this","onRemove","markCell","effect","join","add","getCellClass","rowIndex","columnIndex","cells","boardView","row","OtherBoard","eventName","handler","savedHandler","useRef","current","eventListener","event","useEventListener","onAttack","_","Gameboard","extractLocations","locations","outsideBoard","flat","coord","overlapsOtherShip","fillBoard","newBoard","place","remove","allShipsPlaced","every","receiveAttack","find","targetData","hit","allSunk","cellData","Player","gameboard","intelligentMoves","collectPreviousHits","calculateAdjacentCells","filter","move","moveSet","max","min","allMoves","j","validMoves","pastMove","calculateMoves","autoPlace","sample","Ship","Array","fill","data","App","computerSetup","setData","newData","dataObj","produce","draft","handleConfirmSetup","enterAttackData","attack","winner","humanAttack","computerMove","computerAttack","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eeae1aec.chunk.js","sourcesContent":["import upperFirst from 'lodash/upperFirst';\nimport { useEffect } from 'react';\n\nconst Notifications = (props) => {\n  const { gameOver, setupComplete, setupConfirmed } = props;\n  const { human, computer } = props;\n\n  useEffect(() => {\n    const myBoard = document.querySelector('.my-board');\n    if (myBoard) {\n      myBoard.classList.toggle('hidden');\n      setTimeout(() => {\n        myBoard.classList.toggle('hidden');\n      }, props.lag);\n    }\n  }, [human, computer, props.lag])\n\n  function collectInfo() {\n    if (!setupComplete) {\n      return ['Place all ships on the board']\n    } else if (gameOver) {\n      return [`Game over. ${gameOver} won!`]\n    } else if (human.history[0]) {\n      return attackInfo();\n    }\n  }\n\n  function attackInfo() {\n    return [human, computer].map(player => {\n      const coords = player.history[player.history.length - 1];\n      const ship = player.board[coords[0]][coords[1]];\n      if (!ship) {\n        return 'Miss!';\n      } else if (!player.ships[ship].isSunk(player.ships[ship].hits)) {\n        return 'Hit!'\n      } else {\n        return `${upperFirst(ship)} sunk!`;\n      }\n    })\n  }\n\n  function getPClass(info, index) {\n    if (info.length === 1) {\n      return 'span-columns';\n    } else {\n      return index === 0 ? 'my-board' : 'computer';\n    }\n  }\n\n  const messageView = (info) => {\n    if (!info) return;\n    return info.map((message, index) => {\n      return(\n        <p \n          key={index}\n          className={getPClass(info, index)}>\n          {message}\n        </p>\n      )\n    })\n  }\n\n  return (\n    <section \n      id='notifications'\n      className='span-columns'>\n      { setupComplete && !setupConfirmed &&\n      <div className='span-columns'>\n        <button\n          onClick= {props.onConfirmSetup}\n          className= 'activated span-columns'>\n          Start Game\n        </button>\n      </div>\n      }\n      {messageView(collectInfo())}\n      { gameOver && \n      <div className='span-columns'>\n        <button\n          className='activated span-columns'\n          onClick={props.onReset}>\n          Play Again\n        </button>\n      </div>\n      }\n    </section>\n  )\n}\n\nexport default Notifications;\n","import { useState, useEffect } from 'react';\nimport range from 'lodash/range';\n\nconst Setup = (props) => {\n  const { ships } = props;\n\n  const [orientation, setOrientation] = useState({\n    carrier: true,\n    battleship: true,\n    cruiser: true,\n    submarine: true,\n    minesweeper: true\n  });\n\n  useEffect(() => {\n    const ships = document.querySelectorAll('.ship');\n    ships.forEach(ship => {\n      ship.addEventListener('mousedown', onMouseDown);\n    });\n    return () => {\n      ships.forEach(ship => {\n        ship.removeEventListener('mousedown', onMouseDown);\n      });\n    }\n  })\n\n  function onMouseDown(e) {\n    const startXY = [e.clientX, e.clientY];\n    const ship = e.target.closest('ul');\n    const part = e.target.closest('li');\n    const shipName = ship.className.split(' ')[1];\n    const partNr = part.className.split(' ')[0].split('_')[1];\n    const shiftX = e.clientX - ship.getBoundingClientRect().left;\n    const clone = cloneShip(ship);\n  \n    moveAt(e.pageX, e.pageY);\n    function moveAt(pageX, pageY) {\n      clone.style.left = pageX - shiftX + 'px';\n      clone.style.top = pageY - clone.offsetHeight / 2 + 'px';\n    }\n\n    document.addEventListener('mousemove', onMouseMove);\n    function onMouseMove(e) {\n      moveAt(e.pageX, e.pageY);\n    }\n\n    clone.addEventListener('mouseup', onMouseUp);\n    function onMouseUp(e) {\n      const endXY = [e.clientX, e.clientY];\n      document.removeEventListener('mousemove', onMouseMove);\n      if (checkIfMouseClick(startXY, endXY)) {\n        rotate(shipName);\n      }\n      const cell = getCell(e, clone);\n      if (cell) {\n        const coords = getCoords(cell, shipName, partNr);\n        const position = {\n          coords,\n          horizontal: orientation[shipName]\n        };\n        if (coords && props.onPlacement(shipName, position)) {\n          return;\n        }\n      }\n      ship.classList.toggle('no-display');\n    }\n  }\n\n  function cloneShip(ship) {\n    const clone = ship.cloneNode(true);\n    clone.style.position = 'absolute';\n    document.body.append(clone);\n    ship.classList.toggle('no-display');\n    return clone;\n  }\n\n  function checkIfMouseClick(startXY, endXY) {\n    return range(0,3).includes(endXY[0] - startXY[0]) &&\n      range(0,3).includes(endXY[1] - startXY[1])\n  }\n\n  function rotate(shipName) {\n    setOrientation({\n      ...orientation,\n      [shipName]: !orientation[shipName]\n    });\n  }\n\n  function getCell(e, clone) {\n    document.body.removeChild(clone);\n    const elementBelow = document.elementFromPoint(e.clientX, e.clientY);\n    return elementBelow.closest('.cell');\n  }\n\n  function getCoords(cell, ship, partNr) {\n    let coords = cell.className.split(' ')[0].split('_');\n    coords.shift();\n    coords = coords.map(i => Number(i));\n    orientation[ship] ? coords[1] -= partNr : coords[0] -= partNr;\n    return coords.some(i => i < 0) ? false : coords;\n  }\n\n  function horizontalStyle(length) {\n    return {\n      gridColumn: `1 / span ${length}`,\n      width: `${length * 25}px`,\n      gridTemplateColumns: `repeat(${length}, 25px)`,\n      gridTemplateRows: '25px'\n    }\n  }\n\n  function verticalStyle(length) { \n    return {\n      gridRow: `1 / span ${length}`,\n      width: '25px',\n      gridTemplateColumns: '25px',\n      gridTemplateRows: `repeat(${length}, 25px)`\n    }\n  }\n\n  const shipView = (ship) => {\n    let content = [];\n    for (let i = 0; i < ship.length; i++) {\n      content.push(\n        <li\n          key={i}\n          className={`_${i} part`}>\n          <span></span>\n        </li>\n      )\n    }\n    return content;\n  }\n  \n  const shipViews = Object.values(ships).map((ship, index) => {\n    return (\n      <ul \n        key={index}\n        className={`ship ${ship.name}`}\n        style={\n          orientation[ship.name] ? \n            horizontalStyle(ship.length) : \n            verticalStyle(ship.length)\n        }>\n        {shipView(ship)}\n      </ul>\n    )\n  })\n\n  return (\n    <section id='setup'>\n      <div\n        className='shipyard'>\n        {shipViews}\n      </div>\n      <p>\n        - click on a ship to rotate<br/>\n        - click on the board to reset a ship\n      </p>\n    </section>\n  )\n}\n\nexport default Setup;\n","import { useEffect } from 'react';\nimport Setup from './Setup';\n\nconst Board = (props) => {\n  const { board, history, ships } = props.human;\n\n  useEffect(() => {\n    if (props.setupComplete) return;\n    setTimeout(markCell, props.lag);\n    const boardSection = document.querySelector('#board');\n    const cells = boardSection.querySelectorAll('.cell:not(.false)');\n    cells.forEach(cell => {\n      cell.addEventListener('click', removeShip);\n    })\n    return () => { \n      cells.forEach(cell => {\n        cell.removeEventListener('click', removeShip);\n      })\n    }\n  })\n\n  function removeShip(e) {\n    const shipName = this.closest('li').className.split(' ')[1];\n    props.onRemove(shipName);\n    const ship = document.querySelector(`.${shipName}`);\n    ship.classList.toggle('no-display');\n  }\n\n  function markCell() {\n    if (!history[0]) return;\n    const coords = history[history.length - 1];\n    const effect = board[coords[0]][coords[1]] ? 'hit' : 'shot';\n    const boardSection = document.querySelector('#board');\n    const cell = boardSection.querySelector(`._${coords.join('_')}`);\n    cell.classList.add(effect);\n  }\n\n  function getCellClass(rowIndex, columnIndex, cell) {\n    if (!cell) {\n      return `_${rowIndex}_${columnIndex} cell`;\n    } else if (props.setupConfirmed) {\n      return `_${rowIndex}_${columnIndex} ${cell} cell`;\n    } else {\n      return `_${rowIndex}_${columnIndex} ${cell} setup cell`;\n    }\n  }\n\n  const boardView = board.map((row, rowIndex) => {\n    return row.map((cell, columnIndex) => {\n      return (\n        <li\n          key={`_${rowIndex}_${columnIndex}`}\n          className={getCellClass(rowIndex, columnIndex, cell)}>\n          <span></span>\n        </li>\n      )\n    });\n  });\n\n  return (\n    <section \n      id='board'\n      className={ props.setupConfirmed ? 'board' : 'board span-columns' }>\n      <h3\n        className={ props.setupConfirmed ? '' : 'hidden' }>\n        My Board\n      </h3>\n      <ul>\n        {boardView}\n      </ul>\n      { !props.setupConfirmed &&\n        <Setup\n          ships={props.human.ships}\n          onPlacement={props.onPlacement}/>\n      }\n    </section>\n  )\n}\n\nexport default Board;\n","import { useEffect, useRef } from 'react';\n\nconst OtherBoard = (props) => {\n  const { board, history } = props.computer;\n\n  useEffect(() => markCell());\n\n  useEventListener('click', attack);\n\n  function useEventListener(eventName, handler) {\n    const savedHandler = useRef();\n    useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n    useEffect(() => {\n      const boardSection = document.querySelector('#other-board');\n      const cells = boardSection.querySelectorAll('.cell');\n      const eventListener = event => savedHandler.current(event);\n      cells.forEach(cell => {\n        cell.addEventListener(eventName, eventListener);\n      })\n      return () => {\n        cells.forEach(cell => {\n          cell.removeEventListener(eventName, eventListener);\n        })\n      };\n    }, [eventName]);\n  }\n\n  function attack(e) {\n    let coords = e.target.closest('li').className.split(' ')[0].split('_');\n    coords.shift();\n    coords = coords.map(i => Number(i));\n    props.onAttack(coords);\n  }\n\n  function markCell () {\n    if (!history[0]) return;\n    const coords = history[history.length - 1];\n    const effect = board[coords[0]][coords[1]] ? 'hit' : 'shot';\n    const boardSection = document.querySelector('#other-board');\n    const cell = boardSection.querySelector(`._${coords.join('_')}`);\n    cell.classList.add(effect);\n  }\n\n  const boardView = board.map((row, rowIndex) => {\n    return row.map((_, columnIndex) => {\n      return (\n        <li\n          key={`_${rowIndex}_${columnIndex}`}\n          className={`_${rowIndex}_${columnIndex} cell`}>\n          <span></span>\n        </li>\n      )\n    });\n  });\n\n  return (\n    <section \n      id='other-board'\n      className='board'>\n      <h3>Computer</h3>\n      <ul>\n        {boardView}\n      </ul>\n    </section>\n  )\n}\n\nexport default OtherBoard;\n","const Gameboard = () => {\n\n  const place = (ship, position, player) => {\n    const { coords, horizontal } = position;\n    const board = player.board;\n    const locations = extractLocations(ship, coords, horizontal);\n    if (outsideBoard(locations) || overlapsOtherShip(locations, board)) {\n      return false;\n    } else {\n      return fillBoard(ship, locations, board);\n    }\n  }\n\n  const remove = (ship, player) => {\n    const board = player.board;\n    return board.map(row => {\n      return row.map(cell => {\n        return cell === ship.name ? false : cell;\n      })\n    })\n  }\n\n  function allShipsPlaced(player) {\n    const ships = Object.values(player.ships).map(ship => ship.name);\n    return ships.every(ship => {\n      return player.board.flat().some(cell => {\n        return cell === ship;\n      })\n    })\n  }\n\n  const receiveAttack = (coords, player) => {\n    const { board, history } = player;\n    if (!history.find(i => i[0] === coords[0] && i[1] === coords[1])) {\n      const target = board[coords[0]][coords[1]];\n      const targetData = player.ships[target];\n      const hits = target ? targetData.hit(targetData.hits) : false;\n      return {\n        history : [...history, coords],\n        target,\n        hits\n      };\n    } else {\n      return false;\n    }\n  }\n\n  const allSunk = (player) => {\n    const board = player.board;\n    return board.every(row => {\n      return row.every(cell => {\n        const cellData = player.ships[cell];\n        return cell ? cellData.isSunk(cellData.hits) : true;\n      });\n    });\n  }\n\n  // PRIVATE\n\n  const extractLocations = (ship, coords, horizontal) => {\n    const locations = [];\n    if (horizontal) {\n      for (let i = 0; i < ship.length; i++) {\n        locations.push([coords[0], coords[1] + i]);\n      };\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        locations.push([coords[0] + i, coords[1]]);\n      };\n    }\n    return locations;\n  }\n\n  const outsideBoard = (locations) => {\n    return locations.flat().some(coord => coord >=10);\n  }\n\n  const overlapsOtherShip = (locations, board) => {\n    return locations.some(coords => {\n      return board[coords[0]][coords[1]];\n    });\n  }\n\n  const fillBoard = (ship, locations, board) => {\n    let newBoard = board.map(i => [...i]);\n    locations.forEach(coords => {\n      newBoard[coords[0]][coords[1]] = ship.name;\n    });\n    return newBoard;\n  }\n\n  return { place, remove, allShipsPlaced, receiveAttack, allSunk }\n}\n\nexport default Gameboard;\n","import Gameboard from './Gameboard';\nimport sample from 'lodash/sample';\nimport range from 'lodash/range';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\n\nconst Player = () => { \n  const gameboard = Gameboard();\n\n  const calculateMoves = (player) => {\n    const history = player.history;\n    const moveSet = intelligentMoves(player) || allMoves();\n    return validMoves(moveSet, history);\n  }\n  \n  const autoPlace = (ship, player) => {\n    let board;\n    do {\n      const position = {\n        coords: sample(allMoves()),\n        horizontal: sample([true, false])\n      };\n      board = gameboard.place(ship, position, player);\n    } while (!board)\n    return board;\n  }\n\n  // PRIVATE\n\n  const intelligentMoves = (player) => {\n    const hits = collectPreviousHits(player);\n    if (!hits) return false;\n    const moveSet = calculateAdjacentCells(hits);\n    return moveSet.filter(move => {\n      return move.every(coord => range(0,10).includes(coord));\n    });\n  }\n\n  const collectPreviousHits = (player) => {\n    const { board, ships, history } = player;\n    const target = Object.values(ships).find(ship => {\n      return !ship.isSunk(ship.hits) && ship.hits > 0;\n    });\n    if (!target) return false;\n    return history.filter(coords => {\n      return board[coords[0]][coords[1]] === target.name;\n    });\n  }\n\n  const calculateAdjacentCells = (hits) => {\n    hits = [hits.map(hit => hit[0]), hits.map(hit => hit[1])];\n    const moveSet = [];\n    if (hits[0].length === 1 || hits[0][0] !== hits[0][1]) {\n      moveSet.push([ max(hits[0]) + 1, hits[1][0] ]);\n      moveSet.push([ min(hits[0]) - 1, hits[1][0] ]);\n    }\n    if (hits[1].length === 1 || hits[1][0] !== hits[1][1]) {\n      moveSet.push([ hits[0][0], max(hits[1]) + 1 ]);\n      moveSet.push([ hits[0][0], min(hits[1]) - 1 ]);\n    }\n    return moveSet;\n  }\n\n  const allMoves = () => {\n    return range(0, 10).map(i => {\n      return range(0, 10).map(j => {\n        return [i, j];\n      })\n    }).flat();\n  }\n\n  const validMoves = (moveSet, history) => {\n    return moveSet.filter(move => {\n      return history.every(pastMove => {\n        return move[0] !== pastMove[0] || move[1] !== pastMove[1]; \n      });\n    });\n  }\n\n  return { gameboard, calculateMoves, autoPlace }\n}\n\nexport default Player;\n","const Ship = (name, length) => {\n\n  const hit = (hits) => {\n    return hits + 1;\n  }\n\n  const isSunk = (hits) => {\n    return length - hits === 0 ? true : false;\n  }\n\n  return { name, length, hit, isSunk }\n}\n\nexport default Ship;\n","import Ship from './Ship'\n\nconst player = {\n  board: Array(10).fill().map(() => Array(10).fill(false)),\n  ships: {\n    carrier: { \n      ...Ship('carrier', 5), \n      hits: 0 \n    },\n    battleship: { \n      ...Ship('battleship', 4), \n      hits: 0 \n    },\n    cruiser: { \n      ...Ship('cruiser', 3), \n      hits: 0 \n    },\n    submarine: { \n      ...Ship('submarine', 3), \n      hits: 0 \n    },\n    minesweeper: { \n      ...Ship('minesweeper', 2), \n      hits: 0 \n    },\n  }, \n  history: []\n}\n\nconst data = {\n  setupConfirmed: false,\n  gameOver: false,\n  human: {\n    ...player\n  },\n  computer: {\n    ...player\n  }\n}\n\nexport default data;\n","import { useState } from 'react';\nimport produce from 'immer';\nimport sample from 'lodash/sample';\nimport './App.scss';\nimport Notifications from './components/Notifications';\nimport Board from './components/Board';\nimport OtherBoard from './components/OtherBoard';\nimport Player from './logic/Player';\nimport dataObj from './logic/data';\n\nfunction App() {\n\n  const player = Player();\n  const gameboard = player.gameboard;\n  const lag = 100;\n\n  const [data, setData] = useState(computerSetup());\n  const { human, computer } = data;\n\n  function computerSetup() {\n    let newData = dataObj;\n    for (const ship in newData.computer.ships) {\n      const computer = newData.computer;\n      let board = player.autoPlace(computer.ships[ship], computer);\n      newData = produce(newData, (draft) => {\n        draft.computer.board = board;\n      });\n    }\n    return newData;\n  }\n\n  function handlePlacement(ship, position) {\n    const board = gameboard.place(human.ships[ship], position, human);\n    if (board) {\n      const newData = produce(data, (draft) => {\n        draft.human.board = board;\n      })\n      setData(newData);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function handleRemove(ship) {\n    const board = gameboard.remove(human.ships[ship], human);\n    const newData = produce(data, (draft) => {\n      draft.human.board = board;\n    })\n    setData(newData);\n  }\n\n  function handleConfirmSetup() {\n    setData({ ...data, setupConfirmed: true });\n  }\n\n  function handleAttack(coords) {\n    const humanAttack = gameboard.receiveAttack(coords, computer);\n    if (!humanAttack) return;\n    const computerMove = sample(player.calculateMoves(human));\n    const computerAttack = gameboard.receiveAttack(computerMove, human);\n    const newData = produce(data, (draft) => {\n      enterAttackData(draft, humanAttack, 'computer', 'You');\n      enterAttackData(draft, computerAttack, 'human', 'Computer');\n    })\n    setData(newData);\n  }\n\n  function enterAttackData(draft, attack, player, winner) {\n    if (attack.target) {\n      draft[player].ships[attack.target].hits = attack.hits;\n      if (!draft.gameOver) {\n        draft.gameOver = gameboard.allSunk(draft[player]) ? winner : false;\n      }\n    }\n    draft[player].history = attack.history;\n  }\n\n  function handleReset() {\n    setData(computerSetup());\n    const cells = document.querySelectorAll(`.cell`);\n    cells.forEach(cell => {\n      cell.classList.remove('shot');\n      cell.classList.remove('hit');\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Notifications\n        human={human}\n        computer={computer}\n        setupConfirmed={data.setupConfirmed}\n        gameOver={data.gameOver}\n        lag={lag}\n        setupComplete={gameboard.allShipsPlaced(human)}\n        onConfirmSetup={handleConfirmSetup}\n        onReset={handleReset}/>\n      <Board \n        human={human}\n        setupConfirmed={data.setupConfirmed}\n        lag={lag}\n        onRemove={handleRemove}\n        onPlacement={handlePlacement}\n        onConfirmSetup={handleConfirmSetup}/>\n      { data.setupConfirmed &&\n      <OtherBoard\n        computer={computer}\n        gameOver={data.gameOver}\n        lag={lag}\n        onAttack={handleAttack}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}