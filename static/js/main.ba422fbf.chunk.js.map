{"version":3,"sources":["components/Notifications.js","components/Setup.js","components/Board.js","components/OtherBoard.js","logic/Gameboard.js","logic/Player.js","logic/Ship.js","logic/data.js","App.js","index.js"],"names":["Notifications","props","gameOver","setupComplete","setupConfirmed","human","computer","getPClass","info","index","length","useEffect","myBoard","document","querySelector","classList","toggle","setTimeout","lag","id","className","onClick","onConfirmSetup","map","message","messageView","history","player","coords","ship","board","ships","isSunk","hits","upperFirst","onReset","Setup","useState","carrier","battleship","cruiser","submarine","minesweeper","orientation","setOrientation","rotate","e","shipName","target","closest","split","dragStart","partNr","explicitOriginalTarget","this","dataTransfer","setData","add","dragEnd","some","row","cell","remove","dragOver","preventDefault","dragDrop","data","getData","shift","i","Number","processCoords","position","horizontal","onPlacement","verticalStyle","gridRow","width","gridTemplateColumns","gridTemplateRows","querySelectorAll","cells","forEach","addEventListener","addEvents","removeEventListener","removeEvents","shipView","content","push","shipViews","Object","values","name","draggable","style","gridColumn","Board","removeShip","onRemove","markCell","effect","join","getCellClass","rowIndex","columnIndex","boardView","OtherBoard","eventName","handler","savedHandler","useRef","current","eventListener","event","useEventListener","onAttack","_","Gameboard","extractLocations","locations","outsideBoard","flat","coord","overlapsOtherShip","fillBoard","newBoard","place","allShipsPlaced","every","receiveAttack","find","targetData","hit","allSunk","cellData","Player","gameboard","intelligentMoves","collectPreviousHits","calculateAdjacentCells","filter","move","range","includes","moveSet","max","min","allMoves","j","validMoves","pastMove","calculateMoves","autoPlace","sample","Ship","Array","fill","App","computerSetup","newData","dataObj","produce","draft","handleConfirmSetup","enterAttackData","attack","winner","humanAttack","computerMove","computerAttack","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ba422fbf.chunk.js","sourcesContent":["import upperFirst from 'lodash/upperFirst';\nimport { useEffect } from 'react';\n\nconst Notifications = (props) => {\n  const { gameOver, setupComplete, setupConfirmed } = props;\n  const { human, computer } = props;\n\n  useEffect(() => {\n    const myBoard = document.querySelector('.my-board');\n    if (myBoard) {\n      myBoard.classList.toggle('hidden');\n      setTimeout(() => {\n        myBoard.classList.toggle('hidden');\n      }, props.lag);\n    }\n  }, [human, computer, props.lag])\n\n  function collectInfo() {\n    if (!setupComplete) {\n      return ['Place all ships on the board']\n    } else if (gameOver) {\n      return [`Game over. ${gameOver} won!`]\n    } else if (human.history[0]) {\n      return attackInfo();\n    }\n  }\n\n  function attackInfo() {\n    return [human, computer].map(player => {\n      const coords = player.history[player.history.length - 1];\n      const ship = player.board[coords[0]][coords[1]];\n      if (!ship) {\n        return 'Miss!';\n      } else if (!player.ships[ship].isSunk(player.ships[ship].hits)) {\n        return 'Hit!'\n      } else {\n        return `${upperFirst(ship)} sunk!`;\n      }\n    })\n  }\n\n  function getPClass(info, index) {\n    if (info.length === 1) {\n      return 'span-columns';\n    } else {\n      return index === 0 ? 'my-board' : 'computer';\n    }\n  }\n\n  const messageView = (info) => {\n    if (!info) return;\n    return info.map((message, index) => {\n      return(\n        <p \n          key={index}\n          className={getPClass(info, index)}>\n          {message}\n        </p>\n      )\n    })\n  }\n\n  return (\n    <section \n      id='notifications'\n      className='span-columns'>\n      { setupComplete && !setupConfirmed &&\n      <div className='span-columns'>\n        <button\n          onClick= {props.onConfirmSetup}\n          className= 'activated span-columns'>\n          Start Game\n        </button>\n      </div>\n      }\n      {messageView(collectInfo())}\n      { gameOver && \n      <div className='span-columns'>\n        <button\n          className='activated span-columns'\n          onClick={props.onReset}>\n          Play Again\n        </button>\n      </div>\n      }\n    </section>\n  )\n}\n\nexport default Notifications;\n","import { useState, useEffect } from 'react';\n\nconst Setup = (props) => {\n  const human = props.human;\n  const ships = human.ships;\n\n  const [orientation, setOrientation] = useState({\n    carrier: true,\n    battleship: true,\n    cruiser: true,\n    submarine: true,\n    minesweeper: true\n  });\n\n  useEffect(() => {\n    const setupSection = document.querySelector('#setup');\n    const ships = setupSection.querySelectorAll('.ship');\n    const boardSection = document.querySelector('#board');\n    const cells = boardSection.querySelectorAll('.cell');\n    addEvents(ships, cells);\n    return () => removeEvents(ships, cells);\n  })\n\n  function addEvents(ships, cells) {\n    ships.forEach(ship => {\n      ship.addEventListener('click', rotate);\n      ship.addEventListener('dragstart', dragStart);\n      ship.addEventListener('dragend', dragEnd);\n    })\n    for(const cell of cells) {\n      cell.addEventListener('dragover', dragOver);\n      cell.addEventListener('drop', dragDrop);\n    }\n  }\n\n  function removeEvents(ships, cells) {\n    ships.forEach(ship => {\n      ship.removeEventListener('click', rotate);\n      ship.removeEventListener('dragstart', dragStart);\n      ship.removeEventListener('dragend', dragEnd);\n    })\n    for(const cell of cells) {\n      cell.removeEventListener('dragover', dragOver);\n      cell.removeEventListener('drop', dragDrop);\n    }\n  }\n\n  function rotate(e) {\n    const ship = e.target.closest('ul');\n    const shipName = ship.className.split(' ')[1];\n    setOrientation({\n      ...orientation,\n      [shipName]: !orientation[shipName]\n    });\n  }\n\n  function dragStart(e) {\n    const part = e.explicitOriginalTarget.closest('li');\n    const partNr = part.className.split(' ')[0].split('_')[1];\n    const ship = this.className.split(' ')[1];\n    e.dataTransfer.setData(\"text/plain\", `${partNr} ${ship}`);\n    setTimeout(() => this.classList.add('no-display'), 0);\n  }\n\n  function dragEnd(e) {\n    const ship = this.className.split(' ')[1];\n    const succes = human.board.some(row => {\n      return row.some(cell => cell === ship);\n    })\n    if (!succes) this.classList.remove('no-display');\n  }\n  \n  function dragOver(e) {\n    e.preventDefault();\n  }\n\n  function dragDrop(e) {\n    const cell = this.closest('li');\n    const data = e.dataTransfer.getData(\"text/plain\");\n    const ship = data.split(' ')[1];\n    const partNr = Number(data.split(' ')[0]);\n    const coords = processCoords(cell, ship, partNr)\n    if (coords.some(i => i < 0)) return false;\n    const position = {\n      coords,\n      horizontal: orientation[ship]\n    };\n    props.onPlacement(ship, position);  \n  }\n\n  function processCoords(cell, ship, partNr) {\n    let coords = cell.className.split(' ')[0].split('_');\n    coords.shift();\n    coords = coords.map(i => Number(i));\n    orientation[ship] ? coords[1] -= partNr : coords[0] -= partNr;\n    return coords;\n  }\n\n  function horizontalStyle(length) {\n    return {\n      gridColumn: `1 / span ${length}`,\n      width: `${length * 25}px`,\n      gridTemplateColumns: `repeat(${length}, 25px)`,\n      gridTemplateRows: '25px'\n    }\n  }\n\n  function verticalStyle(length) { \n    return {\n      gridRow: `1 / span ${length}`,\n      width: '25px',\n      gridTemplateColumns: '25px',\n      gridTemplateRows: `repeat(${length}, 25px)`\n    }\n  }\n\n  const shipView = (ship) => {\n    let content = [];\n    for (let i = 0; i < ship.length; i++) {\n      content.push(\n        <li\n          key={i}\n          className={`_${i} part`}>\n          <span></span>\n        </li>\n      )\n    }\n    return content;\n  }\n  \n  const shipViews = Object.values(ships).map((ship, index) => {\n    return (\n      <ul \n        key={index}\n        className={`ship ${ship.name}`}\n        draggable='true'\n        style={\n          orientation[ship.name] ? \n            horizontalStyle(ship.length) : \n            verticalStyle(ship.length)\n        }>\n        {shipView(ship)}\n      </ul>\n    )\n  })\n\n  return (\n    <section id='setup'>\n      <div\n        className='shipyard'>\n        {shipViews}\n      </div>\n      <p>\n        - click on a ship to rotate<br/>\n        - click on the board to reset a ship\n      </p>\n    </section>\n  )\n}\n\nexport default Setup;\n","import { useEffect } from 'react';\nimport Setup from './Setup';\n\nconst Board = (props) => {\n  const { board, history } = props.human;\n\n  useEffect(() => {\n    if (props.setupComplete) return;\n    setTimeout(markCell, props.lag);\n    const boardSection = document.querySelector('#board');\n    const cells = boardSection.querySelectorAll('.cell:not(.false)');\n    cells.forEach(cell => {\n      cell.addEventListener('click', removeShip);\n    })\n    return () => { \n      cells.forEach(cell => {\n        cell.removeEventListener('click', removeShip);\n      })\n    }\n  })\n\n  function removeShip(e) {\n    const shipName = this.closest('li').className.split(' ')[1];\n    props.onRemove(shipName);\n    const setupSection = document.querySelector('#setup');\n    const ship = setupSection.querySelector(`.${shipName}`);\n    ship.classList.remove('no-display');\n  }\n\n  function markCell() {\n    if (!history[0]) return;\n    const coords = history[history.length - 1];\n    const effect = board[coords[0]][coords[1]] ? 'hit' : 'shot';\n    const boardSection = document.querySelector('#board');\n    const cell = boardSection.querySelector(`._${coords.join('_')}`);\n    cell.classList.add(effect);\n  }\n\n  function getCellClass(rowIndex, columnIndex, cell) {\n    if (!cell) {\n      return `_${rowIndex}_${columnIndex} cell`;\n    } else if (props.setupConfirmed) {\n      return `_${rowIndex}_${columnIndex} ${cell} cell`;\n    } else {\n      return `_${rowIndex}_${columnIndex} ${cell} setup cell`;\n    }\n  }\n\n  const boardView = board.map((row, rowIndex) => {\n    return row.map((cell, columnIndex) => {\n      return (\n        <li\n          key={`_${rowIndex}_${columnIndex}`}\n          className={getCellClass(rowIndex, columnIndex, cell)}>\n          <span></span>\n        </li>\n      )\n    });\n  });\n\n  return (\n    <section \n      id='board'\n      className={ props.setupConfirmed ? 'board' : 'board span-columns' }>\n      <h3\n        className={ props.setupConfirmed ? '' : 'hidden' }>\n        My Board\n      </h3>\n      <ul>\n        {boardView}\n      </ul>\n      { !props.setupConfirmed &&\n        <Setup\n          human={props.human}\n          onPlacement={props.onPlacement}/>\n      }\n    </section>\n  )\n}\n\nexport default Board;\n","import { useEffect, useRef } from 'react';\n\nconst OtherBoard = (props) => {\n  const { board, history } = props.computer;\n\n  useEffect(() => markCell());\n\n  useEventListener('click', attack);\n\n  function useEventListener(eventName, handler) {\n    const savedHandler = useRef();\n    useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n    useEffect(() => {\n      const boardSection = document.querySelector('#other-board');\n      const cells = boardSection.querySelectorAll('.cell');\n      const eventListener = event => savedHandler.current(event);\n      cells.forEach(cell => {\n        cell.addEventListener(eventName, eventListener);\n      })\n      return () => {\n        cells.forEach(cell => {\n          cell.removeEventListener(eventName, eventListener);\n        })\n      };\n    }, [eventName]);\n  }\n\n  function attack(e) {\n    let coords = e.target.closest('li').className.split(' ')[0].split('_');\n    coords.shift();\n    coords = coords.map(i => Number(i));\n    props.onAttack(coords);\n  }\n\n  function markCell () {\n    if (!history[0]) return;\n    const coords = history[history.length - 1];\n    const effect = board[coords[0]][coords[1]] ? 'hit' : 'shot';\n    const boardSection = document.querySelector('#other-board');\n    const cell = boardSection.querySelector(`._${coords.join('_')}`);\n    cell.classList.add(effect);\n  }\n\n  const boardView = board.map((row, rowIndex) => {\n    return row.map((_, columnIndex) => {\n      return (\n        <li\n          key={`_${rowIndex}_${columnIndex}`}\n          className={`_${rowIndex}_${columnIndex} cell`}>\n          <span>{_[0]}</span>\n        </li>\n      )\n    });\n  });\n\n  return (\n    <section \n      id='other-board'\n      className='board'>\n      <h3>Computer</h3>\n      <ul>\n        {boardView}\n      </ul>\n    </section>\n  )\n}\n\nexport default OtherBoard;\n","const Gameboard = () => {\n\n  const place = (ship, position, player) => {\n    const { coords, horizontal } = position;\n    const board = player.board;\n    const locations = extractLocations(ship, coords, horizontal);\n    if (outsideBoard(locations) || overlapsOtherShip(locations, board)) {\n      return false;\n    } else {\n      return fillBoard(ship, locations, board);\n    }\n  }\n\n  const remove = (ship, player) => {\n    const board = player.board;\n    return board.map(row => {\n      return row.map(cell => {\n        return cell === ship.name ? false : cell;\n      })\n    })\n  }\n\n  function allShipsPlaced(player) {\n    const ships = Object.values(player.ships).map(ship => ship.name);\n    return ships.every(ship => {\n      return player.board.flat().some(cell => {\n        return cell === ship;\n      })\n    })\n  }\n\n  const receiveAttack = (coords, player) => {\n    const { board, history } = player;\n    if (!history.find(i => i[0] === coords[0] && i[1] === coords[1])) {\n      const target = board[coords[0]][coords[1]];\n      const targetData = player.ships[target];\n      const hits = target ? targetData.hit(targetData.hits) : false;\n      return {\n        history : [...history, coords],\n        target,\n        hits\n      };\n    } else {\n      return false;\n    }\n  }\n\n  const allSunk = (player) => {\n    const board = player.board;\n    return board.every(row => {\n      return row.every(cell => {\n        const cellData = player.ships[cell];\n        return cell ? cellData.isSunk(cellData.hits) : true;\n      });\n    });\n  }\n\n  // PRIVATE\n\n  const extractLocations = (ship, coords, horizontal) => {\n    const locations = [];\n    if (horizontal) {\n      for (let i = 0; i < ship.length; i++) {\n        locations.push([coords[0], coords[1] + i]);\n      };\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        locations.push([coords[0] + i, coords[1]]);\n      };\n    }\n    return locations;\n  }\n\n  const outsideBoard = (locations) => {\n    return locations.flat().some(coord => coord >=10);\n  }\n\n  const overlapsOtherShip = (locations, board) => {\n    return locations.some(coords => {\n      return board[coords[0]][coords[1]];\n    });\n  }\n\n  const fillBoard = (ship, locations, board) => {\n    let newBoard = board.map(i => [...i]);\n    locations.forEach(coords => {\n      newBoard[coords[0]][coords[1]] = ship.name;\n    });\n    return newBoard;\n  }\n\n  return { place, remove, allShipsPlaced, receiveAttack, allSunk }\n}\n\nexport default Gameboard;\n","import Gameboard from './Gameboard';\nimport sample from 'lodash/sample';\nimport range from 'lodash/range';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\n\nconst Player = () => { \n  const gameboard = Gameboard();\n\n  const calculateMoves = (player) => {\n    const history = player.history;\n    const moveSet = intelligentMoves(player) || allMoves();\n    return validMoves(moveSet, history);\n  }\n  \n  const autoPlace = (ship, player) => {\n    let board;\n    do {\n      const position = {\n        coords: sample(allMoves()),\n        horizontal: sample([true, false])\n      };\n      board = gameboard.place(ship, position, player);\n    } while (!board)\n    return board;\n  }\n\n  // PRIVATE\n\n  const intelligentMoves = (player) => {\n    const hits = collectPreviousHits(player);\n    if (!hits) return false;\n    const moveSet = calculateAdjacentCells(hits);\n    return moveSet.filter(move => {\n      return move.every(coord => range(0,10).includes(coord));\n    });\n  }\n\n  const collectPreviousHits = (player) => {\n    const { board, ships, history } = player;\n    const target = Object.values(ships).find(ship => {\n      return !ship.isSunk(ship.hits) && ship.hits > 0;\n    });\n    if (!target) return false;\n    return history.filter(coords => {\n      return board[coords[0]][coords[1]] === target.name;\n    });\n  }\n\n  const calculateAdjacentCells = (hits) => {\n    hits = [hits.map(hit => hit[0]), hits.map(hit => hit[1])];\n    const moveSet = [];\n    if (hits[0].length === 1 || hits[0][0] !== hits[0][1]) {\n      moveSet.push([ max(hits[0]) + 1, hits[1][0] ]);\n      moveSet.push([ min(hits[0]) - 1, hits[1][0] ]);\n    }\n    if (hits[1].length === 1 || hits[1][0] !== hits[1][1]) {\n      moveSet.push([ hits[0][0], max(hits[1]) + 1 ]);\n      moveSet.push([ hits[0][0], min(hits[1]) - 1 ]);\n    }\n    return moveSet;\n  }\n\n  const allMoves = () => {\n    return range(0, 10).map(i => {\n      return range(0, 10).map(j => {\n        return [i, j];\n      })\n    }).flat();\n  }\n\n  const validMoves = (moveSet, history) => {\n    return moveSet.filter(move => {\n      return history.every(pastMove => {\n        return move[0] !== pastMove[0] || move[1] !== pastMove[1]; \n      });\n    });\n  }\n\n  return { gameboard, calculateMoves, autoPlace }\n}\n\nexport default Player;\n","const Ship = (name, length) => {\n\n  const hit = (hits) => {\n    return hits + 1;\n  }\n\n  const isSunk = (hits) => {\n    return length - hits === 0 ? true : false;\n  }\n\n  return { name, length, hit, isSunk }\n}\n\nexport default Ship;\n","import Ship from './Ship'\n\nconst player = {\n  board: Array(10).fill().map(() => Array(10).fill(false)),\n  ships: {\n    carrier: { \n      ...Ship('carrier', 5), \n      hits: 0 \n    },\n    battleship: { \n      ...Ship('battleship', 4), \n      hits: 0 \n    },\n    cruiser: { \n      ...Ship('cruiser', 3), \n      hits: 0 \n    },\n    submarine: { \n      ...Ship('submarine', 3), \n      hits: 0 \n    },\n    minesweeper: { \n      ...Ship('minesweeper', 2), \n      hits: 0 \n    },\n  }, \n  history: []\n}\n\nconst data = {\n  setupConfirmed: false,\n  gameOver: false,\n  human: {\n    ...player\n  },\n  computer: {\n    ...player\n  }\n}\n\nexport default data;\n","import { useState } from 'react';\nimport produce from 'immer';\nimport sample from 'lodash/sample';\nimport './App.scss';\nimport Notifications from './components/Notifications';\nimport Board from './components/Board';\nimport OtherBoard from './components/OtherBoard';\nimport Player from './logic/Player';\nimport dataObj from './logic/data';\n\nfunction App() {\n\n  const player = Player();\n  const gameboard = player.gameboard;\n  const lag = 1000;\n\n  const [data, setData] = useState(computerSetup());\n  const { human, computer } = data;\n\n  function computerSetup() {\n    let newData = dataObj;\n    for (const ship in newData.computer.ships) {\n      const computer = newData.computer;\n      let board = player.autoPlace(computer.ships[ship], computer);\n      newData = produce(newData, (draft) => {\n        draft.computer.board = board;\n      });\n    }\n    return newData;\n  }\n\n  function handlePlacement(ship, position) {\n    const board = gameboard.place(human.ships[ship], position, human);\n    if (board) {\n      const newData = produce(data, (draft) => {\n        draft.human.board = board;\n      })\n      setData(newData);\n    }\n  }\n\n  function handleRemove(ship) {\n    const board = gameboard.remove(human.ships[ship], human);\n    const newData = produce(data, (draft) => {\n      draft.human.board = board;\n    })\n    setData(newData);\n  }\n\n  function handleConfirmSetup() {\n    setData({ ...data, setupConfirmed: true });\n  }\n\n  function handleAttack(coords) {\n    const humanAttack = gameboard.receiveAttack(coords, computer);\n    if (!humanAttack) return;\n    const computerMove = sample(player.calculateMoves(human));\n    const computerAttack = gameboard.receiveAttack(computerMove, human);\n    const newData = produce(data, (draft) => {\n      enterAttackData(draft, humanAttack, 'computer', 'You');\n      enterAttackData(draft, computerAttack, 'human', 'Computer');\n    })\n    setData(newData);\n  }\n\n  function enterAttackData(draft, attack, player, winner) {\n    if (attack.target) {\n      draft[player].ships[attack.target].hits = attack.hits;\n      draft.gameOver = gameboard.allSunk(draft[player]) ? winner : false;\n    }\n    draft[player].history = attack.history;\n  }\n\n  function handleReset() {\n    setData(computerSetup());\n    const cells = document.querySelectorAll(`.cell`);\n    cells.forEach(cell => {\n      cell.classList.remove('shot');\n      cell.classList.remove('hit');\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Notifications\n        human={human}\n        computer={computer}\n        setupConfirmed={data.setupConfirmed}\n        gameOver={data.gameOver}\n        lag={lag}\n        setupComplete={gameboard.allShipsPlaced(human)}\n        onConfirmSetup={handleConfirmSetup}\n        onReset={handleReset}/>\n      <Board \n        human={human}\n        setupConfirmed={data.setupConfirmed}\n        lag={lag}\n        onRemove={handleRemove}\n        onPlacement={handlePlacement}\n        onConfirmSetup={handleConfirmSetup}/>\n      { data.setupConfirmed &&\n      <OtherBoard\n        computer={computer}\n        gameOver={data.gameOver}\n        lag={lag}\n        onAttack={handleAttack}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}